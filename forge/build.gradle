plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

mixin {
    config("${mod_id}.forge.mixins.json")
    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: "official", version: "${minecraft_version}"
    reobf = false
    copyIdeResources = true

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transtive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    // compile against the JEI API but do not include it at runtime
    compileOnly "mezz.jei:jei-1.20.4-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-1.20.4-forge-api:${jei_version}"
    // at runtime, use the full JEI jar for Forge
//    runtimeOnly "mezz.jei:jei-1.20.4-forge:${jei_version}"
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "${mod_id}.forge.mixins.json,${mod_id}.mixins.json"
        ])
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = findProperty('curseKey')
    //debugMode = true
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('../CHANGELOG_LATEST.md')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.withAdditionalFile(sourcesJar)
    mainFile.withAdditionalFile(apiJar)

    doLast {

        if (project.hasProperty('cf_page') && mainFile.curseFileId != null) {
            project.ext.curse_link = "${cf_page}/files/${mainFile.curseFileId}"
        }
    }
}

modrinth {
    token = findProperty('modrinthKey') ?: ""
    //debugMode = true
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('../CHANGELOG_LATEST.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    additionalFiles = [sourcesJar, apiJar]
    gameVersions = "${release_versions}".split(",") as List<String>
}

tasks.modrinth.doLast {

    if (project.hasProperty('modrinth_page') && tasks.modrinth.newVersion != null) {
        project.ext.modrinth_link = "${modrinth_page}/version/${tasks.modrinth.newVersion.id}"
    }
}
